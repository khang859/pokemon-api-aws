AWSTemplateFormatVersion: '2010-09-09'
Resources:
  PokemonApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Pokemon API Gateway
      Description: Integration with PokeAPI to get information about pokemons.
  PokemonLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PokemonApiLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
  PokemonLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  PokemonApiLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt PokemonLambdaExecutionRole.Arn
      Runtime: nodejs18.x
      Code:
        S3Bucket: pokemon-lambda-code
        S3Key: pokemon_api/pokemon_get.zip
  PokemonGetResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref PokemonApiGateway 
      ParentId: !GetAtt PokemonApiGateway.RootResourceId
      PathPart: pokemon
  PokemonGetMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: PokemonApiUserPoolAuthorizer
    Properties:
      RestApiId: !Ref PokemonApiGateway
      ResourceId: !Ref PokemonGetResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref PokemonApiUserPoolAuthorizer
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PokemonApiLambdaFunction.Arn}/invocations
  PokemonApiUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: PokemonApiUserPool
      Schema:
        - Name: email
          Required: true
          Mutable: false
      AutoVerifiedAttributes:
        - email
  PokemonApiUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: PokemonApiUserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref PokemonApiUserPool
  PokemonApiUserPoolAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: PokemonApiUserPoolAuthorizer
      RestApiId: !Ref PokemonApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt PokemonApiUserPool.Arn
Outputs:
  PokemonApiLambdaFunctionName:
    Description: "Name of the Pokemon API Lambda function"
    Value: !Ref PokemonApiLambdaFunction